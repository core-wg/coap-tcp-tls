



CORE                                                          C. Bormann
Internet-Draft                                   Universitaet Bremen TZI
Intended status: Standards Track                                S. Lemay
Expires: October 23, 2016                           V. Solorzano Barboza
                                                      Zebra Technologies
                                                           H. Tschofenig
                                                                ARM Ltd.
                                                               K. Hartke
                                                 Universitaet Bremen TZI
                                                           B. Silverajan
                                        Tampere University of Technology
                                                          B. Raymor, Ed.
                                                               Microsoft
                                                          April 21, 2016


 CoAP (Constrained Application Protocol) over TCP, TLS, and WebSockets
                  draft-ietf-core-coap-tcp-tls-latest

Abstract

   The Constrained Application Protocol (CoAP), although inspired by
   HTTP, was designed to use UDP instead of TCP.  The message layer of
   the CoAP over UDP protocol includes services for reliable delivery,
   simple congestion control, and flow control.

   Some environments would benefit from the availability of CoAP over a
   reliable transport such as TCP or WebSockets, which already provides
   such services.  This document outlines the changes required to use
   CoAP over TCP, TLS, and WebSockets transports.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on October 23, 2016.




Bormann, et al.         Expires October 23, 2016                [Page 1]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


Copyright Notice

   Copyright (c) 2016 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
     1.1.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   4
   2.  CoAP over TCP . . . . . . . . . . . . . . . . . . . . . . . .   5
     2.1.  Message Format  . . . . . . . . . . . . . . . . . . . . .   7
     2.2.  Message Transmission  . . . . . . . . . . . . . . . . . .   9
   3.  CoAP over WebSockets  . . . . . . . . . . . . . . . . . . . .  10
     3.1.  Opening Handshake . . . . . . . . . . . . . . . . . . . .  12
     3.2.  Message Format  . . . . . . . . . . . . . . . . . . . . .  12
     3.3.  Message Transmission  . . . . . . . . . . . . . . . . . .  13
     3.4.  Connection Health . . . . . . . . . . . . . . . . . . . .  14
     3.5.  Closing the Connection  . . . . . . . . . . . . . . . . .  14
   4.  CoAP URIs . . . . . . . . . . . . . . . . . . . . . . . . . .  14
     4.1.  CoAP over TCP and TLS URIs  . . . . . . . . . . . . . . .  14
     4.2.  CoAP over WebSockets URIs . . . . . . . . . . . . . . . .  15
   5.  Security Considerations . . . . . . . . . . . . . . . . . . .  17
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  17
     6.1.  Service Name and Port Number Registration . . . . . . . .  17
     6.2.  URI Scheme Registration . . . . . . . . . . . . . . . . .  18
     6.3.  Well-Known URI Suffix Registration  . . . . . . . . . . .  20
     6.4.  ALPN Protocol ID  . . . . . . . . . . . . . . . . . . . .  21
     6.5.  WebSocket Subprotocol Registration  . . . . . . . . . . .  21
   7.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  21
     7.1.  Normative References  . . . . . . . . . . . . . . . . . .  21
     7.2.  Informative References  . . . . . . . . . . . . . . . . .  23
   Appendix A.  CoAP over WebSocket Examples . . . . . . . . . . . .  24
   Appendix B.  Change Log . . . . . . . . . . . . . . . . . . . . .  27
     B.1.  Since draft-core-coap-tcp-tls-02  . . . . . . . . . . . .  27
   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .  27
   Contributors  . . . . . . . . . . . . . . . . . . . . . . . . . .  27
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  27




Bormann, et al.         Expires October 23, 2016                [Page 2]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


1.  Introduction

   The Constrained Application Protocol (CoAP) [RFC7252] was designed
   for Internet of Things (IoT) deployments, assuming that UDP [RFC0768]
   or DTLS [RFC6347] over UDP can be used unimpeded.  UDP is a good
   choice for transferring small amounts of data across networks that
   follow the IP architecture.

   Some CoAP deployments need to integrate well with existing enterprise
   infrastructures, where UDP-based protocols may not be well-received
   or may even be blocked by firewalls.  Middleboxes that are unaware of
   CoAP usage for IoT can make the use of UDP brittle, resulting in lost
   or malformed packets.

   To address such environments, this document defines additional
   bindings for CoAP, including TCP, TLS, and WebSockets.

       +-----------------------------------------------------------+
       |                                                           |
       |                        Application                        |
       |                                                           |
       +-----------------------------------------------------------+
       |                                                           |
       |                           CoAP                            |
       |                  Requests and Responses                   |
       |                                                           |
       + - - - - - - - - - +-------------------+-------------------+
       |                   |                   |                   |
       |       CoAP        |     CoAP over     |     CoAP over     |
       |     Messaging     |    TCP and TLS    |    WebSockets     |
       |                   |                   |                   |
       +---------+---------+---------+---------+-------------------+
       |         |         |         |         |                   |
       |   UDP   |  DTLS   |   TCP   |   TLS   |    WebSockets     |
       |         |         |         |         |                   |
       +---------+---------+---------+---------+-------------------+

       Figure 1: Abstract layering of CoAP extended by TCP, TLS, and
                                WebSockets

   Where NATs are present, CoAP over TCP can help with their traversal.
   NATs often calculate expiration timers based on the transport layer
   protocol being used by application protocols.  Many NATs maintain
   TCP-based NAT bindings for longer periods based on the assumption
   that a transport layer protocol, such as TCP, offers additional
   information about the session life cycle.  UDP, on the other hand,
   does not provide such information to a NAT and timeouts tend to be
   much shorter, as confirmed by research [HomeGateway].



Bormann, et al.         Expires October 23, 2016                [Page 3]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


   Some environments may also benefit from the ability of TCP to
   exchange larger payloads (such as firmware images) without
   application layer segmentation and to utilize the more sophisticated
   congestion control capabilities provided by many TCP implementations.

   (Note that there is ongoing work to add more elaborate congestion
   control to CoAP as well, see [I-D.bormann-core-cocoa].)

   CoAP may be integrated into a Web environment where the front-end
   uses CoAP over UDP from IoT devices to a cloud infrastructure and
   then CoAP over TCP between the back-end services.  A TCP-to-UDP
   gateway can be used at the cloud boundary to communicate with the
   UDP-based IoT device.

   To make IoT devices work smoothly in these demanding environments,
   CoAP needs to make use of a different transport protocol, namely TCP
   [RFC0793], in some situations secured by TLS [RFC5246].

   Some corporate networks only allow Internet access via a HTTP proxy.
   In this case, the best transport for CoAP would be the WebSocket
   Protocol [RFC6455].  The WebSocket protocol provides two-way
   communication between a client and a server after upgrading an
   HTTP/1.1 [RFC7230] connection and may be available in an environment
   that blocks CoAP over UDP.  Another scenario for CoAP over WebSockets
   is a CoAP application running inside a web browser without access to
   connectivity other than HTTP and WebSockets.

   This document specifies how to access resources using CoAP requests
   and responses over the WebSocket Protocol.  This allows connectivity-
   limited applications to obtain end-to-end CoAP connectivity either by
   communicating CoAP directly with a CoAP server accessible over a
   WebSocket Connection or via a CoAP intermediary that proxies CoAP
   requests and responses between different transports, such as between
   WebSockets and UDP.

1.1.  Terminology

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   [RFC2119].

   This document assumes that readers are familiar with the terms and
   concepts that are used in [RFC6455] and [RFC7252].







Bormann, et al.         Expires October 23, 2016                [Page 4]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


2.  CoAP over TCP

   The interaction model of CoAP over TCP is very similar to the one for
   CoAP over UDP, with the key difference that using TCP voids the need
   to provide certain transport layer protocol features at the CoAP
   level, such as reliable delivery, fragmentation and reassembly, as
   well as congestion control.  The protocol stack is illustrated in
   Figure 2 (derived from [RFC7252], Figure 1).

           +----------------------+
           |      Application     |
           +----------------------+
           +----------------------+
           |  Requests/Responses  |  CoAP (RFC 7252)
           |----------------------|
           |    Message Adapter   |  This Document
           +----------------------+
           +-----------+      ^
           |    TLS    |  or  |
           +-----------+      v
           +----------------------+
           |          TCP         |
           +----------------------+

              Figure 2: The CoAP over TLS/TCP Protocol Stack

   Since TCP offers reliable delivery, there is no need to offer a
   redundant acknowledgement at the CoAP messaging layer.

   Since there is no need to carry around acknowledgement semantics,
   messages do not require a message type; no message layer
   acknowledgement is expected or even possible.  By the nature of TCP,
   messages are always transmitted reliably over TCP.  Figure 3 (derived
   from [RFC7252], Figure 3) shows this message exchange graphically.  A
   UDP-to-TCP gateway will therefore discard all empty messages, such as
   empty ACKs (after operating on them at the message layer), and re-
   pack the contents of all non-empty CON, NON, or ACK messages (i.e.,
   those ACK messages that have a piggy-backed response) into untyped
   messages.

   Similarly, there is no need to detect duplicate delivery of a
   message.  In UDP CoAP, the Message ID is used for relating
   acknowledgements to Confirmable messages as well as for duplicate
   detection.  Since the Message ID thus is not meaningful over TCP, it
   is elided (as indicated by the dashes in Figure 3).






Bormann, et al.         Expires October 23, 2016                [Page 5]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


           Client                Server
              |                     |
              | (no type) [------]  |
              +-------------------->|
              |                     |

             Figure 3: Untyped Message Transmission over TCP.

   A response is sent back as defined in [RFC7252], as illustrated in
   Figure 4 (derived from [RFC7252], Figure 6).

           Client                Server
              |                    |
              | (no type) [------] |
              | GET /temperature   |
              |   (Token 0x74)     |
              +------------------->|
              |                    |
              | (no type) [------] |
              |   2.05 Content     |
              |   (Token 0x74)     |
              |     "22.5 C"       |
              |<-------------------+
              |                    |

           Figure 4: Untyped messages carrying Request/Response.

   EDITOR: These are "leftover" paragraphs from the original Overview
   section.  Keeping until I perform a complete editorial pass of the
   "roughed in" material.

   Conceptually, the CoAP over TCP/TLS specification replaces most of
   CoAP's message layer by a new message adapter on top of TCP or TLS
   that provides a framing mechanism on top of the byte stream provided
   by TCP/TLS, conveying the length information about each CoAP message
   that on datagram transports is provided by the datagram layer below
   (UDP, DTLS).

   The message adapter also adds a way to use signaling messages to
   perform various housekeeping operations on the TCP, see [I-D.bormann-
   core-signaling].

   When CoAP is used over TLS then some of the housekeeping features are
   already available with the TLS Handshake protocol; less new
   functionality is then required.

   Modifications to CoAP beyond the replacement of the message layer
   (e.g., to introduce further optimizations) are intentionally avoided.



Bormann, et al.         Expires October 23, 2016                [Page 6]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


2.1.  Message Format

   The CoAP message format defined in [RFC7252], as shown in Figure 5,
   relies on the datagram transport (UDP, or DTLS over UDP) for keeping
   the individual messages separate and for providing length
   information.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |Ver| T |  TKL  |      Code     |          Message ID           |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Token (if any, TKL bytes) ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Options (if any) ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |1 1 1 1 1 1 1 1|    Payload (if any) ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

              Figure 5: RFC 7252 defined CoAP Message Format.

   In a stream oriented transport protocol such as TCP, a form of
   message delimitation is needed.  For this purpose, CoAP over TCP
   introduces a length field with variable size.  Figure 6 shows the
   adjusted CoAP header format with a modified structure for the fixed
   header (first 4 bytes of the UDP CoAP header), which includes the
   length information of variable size, shown here as an 8-bit length.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |Len=13 |  TKL  | Length (8-bit)|      Code     | TKL bytes ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Options (if any) ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |1 1 1 1 1 1 1 1|    Payload (if any) ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

            Figure 6: CoAP Header with 8-bit Length in Header.

   The initial byte of the frame contains two nibbles, in a similar way
   to the CoAP option encoding (see Section 3.1 of [RFC7252]).

   Len:  The first nibble, Len, is interpreted as a 4-bit unsigned
      integer.  A value between 0 and 12 directly indicates the length
      of message in bytes starting with the first bit of the Options
      field.  The other three values have a special meaning:




Bormann, et al.         Expires October 23, 2016                [Page 7]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


      13:  An 8-bit unsigned integer follows the initial byte and
         indicates the length of options/payload minus 13.

      14:  A 16-bit unsigned integer in network byte order follows the
         initial byte and indicates the length of options/payload minus
         269.

      15:  A 32-bit unsigned integer in network byte order follows the
         initial byte and indicates the length of options/payload minus
         65805.

   TKL:  The second nibble of the initial byte indicates the token
      length.

   The following figures show the shim headers for the 0-bit, 16-bit,
   and the 32-bit headers.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Len  |  TKL  |      Code     | Token (if any, TKL bytes) ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Options (if any) ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |1 1 1 1 1 1 1 1|    Payload (if any) ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

             Figure 7: CoAP Header with elided Length Header.

   For example: A CoAP message just containing a 2.03 code with the
   token 7f and no options or payload would be encoded as shown in
   Figure 8.

    0                   1                   2
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |      0x01     |      0x43     |      0x7f     |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

    Len   =    0 ------>  0x01
    TKL   =    1 ___/
    Code  =  2.03     --> 0x43
    Token =               0x7f

                      Figure 8: CoAP Header Example.






Bormann, et al.         Expires October 23, 2016                [Page 8]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |Len=14 |  TKL  | Length (16 bits)              |   Code        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Token (if any, TKL bytes) ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Options (if any) ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |1 1 1 1 1 1 1 1|    Payload (if any) ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

            Figure 9: CoAP Header with 16-bit Length in Header.

    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |Len=15 |  TKL  | Length (32 bits)
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |               |    Code       |  Token (if any, TKL bytes) ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |   Options (if any) ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |1 1 1 1 1 1 1 1|    Payload (if any) ...
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

           Figure 10: CoAP Header with 32-bit Length in Header.

   The semantics of the other CoAP header fields are left unchanged.

2.2.  Message Transmission

   EDITOR: This is extremely similar to the WebSocket section of the
   same name.

   As CoAP exchanges messages asynchronously over the TCP connection,
   the client can send multiple requests without waiting for responses.
   For this reason, and due to the nature of TCP, responses are returned
   during the same TCP connection as the request.  In the event that the
   connection gets terminated, all requests that have not yet elicited a
   response are implicitly canceled; clients may transmit the request
   again once a connection is reestablished.

   Furthermore, since TCP is bidirectional, requests can be sent from
   both the connecting host and the endpoint that accepted the
   connection.  In other words, the question who initiated the TCP
   connection has no bearing on the meaning of the CoAP terms client and
   server.



Bormann, et al.         Expires October 23, 2016                [Page 9]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


3.  CoAP over WebSockets

   CoAP over WebSockets can be used in a number of configurations.  The
   most basic configuration is a CoAP client seeking to retrieve or
   update a CoAP resource located at a CoAP server that exposes a
   WebSocket endpoint (Figure 11).  The CoAP client takes the role of
   the WebSocket client, establishes a WebSocket Connection and sends a
   CoAP request, to which the CoAP server returns a CoAP response.  The
   WebSocket Connection can be used for any number of requests.

            ___________                            ___________
           |           |                          |           |
           |          _|___      requests      ___|_          |
           |   CoAP  /  \  \  ------------->  /  /  \  CoAP   |
           |  Client \__/__/  <-------------  \__\__/ Server  |
           |           |         responses        |           |
           |___________|                          |___________|
                   WebSocket  =============>  WebSocket
                     Client     Connection     Server

      Figure 11: CoAP Client (WebSocket client) accesses CoAP Server
                            (WebSocket server)

   The challenge in this configuration is to identify resource in the
   namespace of the CoAP server: When the WebSocket Protocol is used by
   a dedicated client directly (i.e., not from a web page through a web
   browser), the client can connect to any WebSocket endpoint.  This
   means it is necessary that the client is able to determine both the
   WebSocket endpoint (identified by a "ws" or "wss" URI) and the path
   and query of the CoAP resource within that endpoint from the same
   URI.  When the WebSocket Protocol is used from a web page, the
   choices are more limited [RFC6454], but the challenge persists.

   Section 4.2 proposes a new "coap+ws" URI scheme that identifies both
   a WebSocket endpoint and a resource within that endpoint as follows:

             coap+ws://example.org/sensors/temperature?u=Cel
                  \______  ______/\___________  ___________/
                         \/                   \/
                                            Uri-Path: "sensors"
       ws://example.org/.well-known/coap    Uri-Path: "temperature"
                                            Uri-Query: "u=Cel"

                    Figure 12: The "coap+ws" URI Scheme

   Another possible configuration is to set up a CoAP forward proxy at
   the WebSocket endpoint.  Depending on what transports are available
   to the proxy, it could forward the request to a CoAP server with a



Bormann, et al.         Expires October 23, 2016               [Page 10]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


   CoAP UDP endpoint (Figure 13), an SMS endpoint (a.k.a. mobile phone),
   or even another WebSocket endpoint.  The client specifies the
   resource to be updated or retrieved in the Proxy-URI Option.

     ___________                ___________                ___________
    |           |              |           |              |           |
    |          _|___        ___|_         _|___        ___|_          |
    |   CoAP  /  \  \ ---> /  /  \ CoAP  /  \  \ ---> /  /  \  CoAP   |
    |  Client \__/__/ <--- \__\__/ Proxy \__/__/ <--- \__\__/ Server  |
    |           |              |           |              |           |
    |___________|              |___________|              |___________|
            WebSocket ===> WebSocket      UDP            UDP
              Client        Server      Client          Server

    Figure 13: CoAP Client (WebSocket client) accesses CoAP Server (UDP
          server) via a CoAP proxy (WebSocket server/UDP client)

   A third possible configuration is a CoAP server running inside a web
   browser (Figure 14).  The web browser initially connects to a
   WebSocket endpoint and is then reachable through the WebSocket
   server.  When no connection exists, the CoAP server is not reachable;
   it therefore can be considered a Sleepy Endpoint (SEP)
   [I-D.dijk-core-sleepy-reqs].  Because the WebSocket server is the
   only way to reach the CoAP server, the CoAP proxy should be a Reverse
   Proxy.

     ___________                ___________                ___________
    |           |              |           |              |           |
    |          _|___        ___|_         _|___        ___|_          |
    |   CoAP  /  \  \ ---> /  /  \ CoAP  /  /  \ ---> /  \  \  CoAP   |
    |  Client \__/__/ <--- \__\__/ Proxy \__\__/ <--- \__/__/ Server  |
    |           |              |           |              |           |
    |___________|              |___________|              |___________|
               UDP            UDP      WebSocket <=== WebSocket
             Client          Server      Server        Client

      Figure 14: CoAP Client (UDP client) accesses sleepy CoAP Server
     (WebSocket client) via a CoAP proxy (UDP server/WebSocket server)

   Further configurations are possible, including those where a
   WebSocket Connection is established through an HTTP proxy.

   CoAP over WebSockets is intentionally very similar to CoAP as defined
   over UDP.  Therefore, instead of presenting CoAP over WebSockets as a
   new protocol, this document specifies it as a series of deltas from
   [RFC7252].





Bormann, et al.         Expires October 23, 2016               [Page 11]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


3.1.  Opening Handshake

   Before CoAP requests and responses can be exchanged, a WebSocket
   Connection needs to be established as defined in Section 4 of
   [RFC6455].  Figure 15 shows an example.

   The WebSocket client MUST include the subprotocol name "coap" in the
   list of protocols, which indicates support for the protocol defined
   in this document.  Any later, incompatible versions of CoAP or CoAP
   over WebSockets will use a different subprotocol name.

   The WebSocket client includes the hostname of the WebSocket server in
   the Host header field of its handshake as per [RFC6455].  The Host
   header field also indicates the default value of the Uri-Host Option
   in requests from the WebSocket client to the WebSocket server.

            GET /.well-known/coap HTTP/1.1
            Host: example.org
            Upgrade: websocket
            Connection: Upgrade
            Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==
            Sec-WebSocket-Protocol: coap
            Sec-WebSocket-Version: 13

            HTTP/1.1 101 Switching Protocols
            Upgrade: websocket
            Connection: Upgrade
            Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=
            Sec-WebSocket-Protocol: coap

                Figure 15: Example of an Opening Handshake

3.2.  Message Format

   Once a WebSocket Connection has been established, CoAP requests and
   responses can be exchanged as WebSocket messages.  Since CoAP uses a
   binary message format, the messages are transmitted in binary data
   frames as specified in Sections 5 and 6 of [RFC6455].

   The message format is very similar to the format specified for CoAP
   over UDP [RFC7252].  The differences are as follows:

   o  Since the underlying TCP connection provides retransmissions and
      deduplication, there is no need for the reliability mechanisms
      provided by CoAP over UDP.  This means the "T" and "Message ID"
      fields in the CoAP message header can be elided.





Bormann, et al.         Expires October 23, 2016               [Page 12]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


   o  Furthermore, since the CoAP version is already negotiated during
      the opening handshake, the "Ver" field can be elided as well.

       0                   1                   2                   3
      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |   R   |  TKL  |      Code     |    Token (TKL bytes) ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |   Options (if any) ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
     |1 1 1 1 1 1 1 1|    Payload (if any) ...
     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

              Figure 16: CoAP Message Format over WebSockets

   The resulting message format is shown in Figure 16.  The four most-
   significant bits of the first byte are reserved (R) and MUST be set
   to zero.  The remaining fields and structure are the same as defined
   in [RFC7252].

   Requests and response messages can be fragmented as specified in
   Section 5.4 of [RFC6455], though typically they are sent unfragmented
   as they tend to be small and fully buffered before transmission.  The
   WebSocket protocol does not provide means for multiplexing; if it is
   not desirable for a large message to monopolize the connection,
   requests and responses can be transferred in a blockwise fashion as
   defined in [I-D.ietf-core-block].

   Messages MUST NOT be Empty (Code 0.00), i.e., messages always carry
   either a request or a response.

3.3.  Message Transmission

   CoAP requests and responses are exchanged asynchronously over the
   WebSocket Connection, i.e., a CoAP client can send multiple requests
   without waiting for a response and the CoAP server can return
   responses in any order.  Responses MUST be returned over the same
   connection as the originating request.  Concurrent requests are
   differentiated by their Token, which is scoped locally to the
   connection.

   The connection is bi-directional, so requests can be sent both by the
   entity that established the connection and the remote host.

   Retransmission and deduplication of messages is provided by the
   WebSocket Protocol.  CoAP over WebSockets therefore does not make a
   distinction between Confirmable or Non-Confirmable messages, and does
   not provide Acknowledgement or Reset messages.



Bormann, et al.         Expires October 23, 2016               [Page 13]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


   Since the WebSocket Protocol provides ordered delivery of messages,
   the mechanism for reordering detection when observing resources
   [RFC7641] is not needed.  The value of the Observe Option in
   notifications therefore MAY be empty on transmission and MUST be
   ignored on reception.

3.4.  Connection Health

   When a client does not receive any response for some time after
   sending a CoAP request (or, similarly, when a client observes a
   resource and it does not receive any notification for some time), the
   connection between the WebSocket client and the WebSocket server may
   be lost or temporarily disrupted without the client being aware of
   it.

   To check the health of the WebSocket Connection (and thereby of all
   active requests, if any), the client can send a Ping frame or an
   unsolicited Pong frame as specified in Section 5.5 of [RFC6455].
   There is no way to retransmit a request without creating a new one.
   Re-registering interest in a resource is permitted, but entirely
   unnecessary.

3.5.  Closing the Connection

   The WebSocket Connection is closed as specified in Section 7 of
   [RFC6455].

   All requests for which the CoAP client has not received a response
   yet are cancelled when the connection is closed.  If the client
   observes one or more resources over the WebSocket Connection, then
   the CoAP server (or intermediary in the role of the CoAP server) MUST
   remove all entries associated with the client from the lists of
   observers when the connection is closed.

4.  CoAP URIs

   CoAP over UDP [RFC7252] defines the "coap" and "coaps" URI schemes
   for identifying CoAP resources and providing a means of locating the
   resource.

4.1.  CoAP over TCP and TLS URIs

   CoAP over TCP uses "coap_tcp" URI scheme.  CoAP over TLS uses the
   "coaps+tcp" scheme.  The rules from Section 6 of [RFC7252] apply to
   both of these URI schemes.

   [RFC7252], Section 8 (Multicast CoAP) is not applicable to these
   schemes.



Bormann, et al.         Expires October 23, 2016               [Page 14]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


   Resources made available via one of the "coap+tcp" or "coaps+tcp"
   schemes have no shared identity with the other scheme or with the
   "coap" or "coaps" scheme, even if their resource identifiers indicate
   the same authority (the same host listening to the same port).  The
   schemes constitute distinct namespaces and, in combination with the
   authority, are considered to be distinct origin servers.

4.1.1.  coap+tcp URI scheme

   coap-tcp-URI = "coap+tcp:" "//" host [ ":" port ] path-abempty
                  [ "?" query ]

   The semantics defined in [RFC7252], Section 6.1, apply to this URI
   scheme, with the following changes:

   o  The port subcomponent indicates the TCP port at which the CoAP
      server is located.  (If it is empty or not given, then the default
      port 5683 is assumed, as with UDP.)

4.1.2.  coaps+tcp URI scheme

   coaps-tcp-URI = "coaps+tcp:" "//" host [ ":" port ] path-abempty
                   [ "?" query ]

   The semantics defined in [RFC7252], Section 6.2, apply to this URI
   scheme, with the following changes:

   o  The port subcomponent indicates the TCP port at which the TLS
      server for the CoAP server is located.  If it is empty or not
      given, then the default port 443 is assumed (this is different
      from the default port for "coaps", i.e., CoAP over DTLS over UDP).

   o  When CoAP is exchanged over TLS port 443, the "TLS Application
      Layer Protocol Negotiation Extension" [RFC7301] MUST be used to
      allow demultiplexing at the server-side.

4.2.  CoAP over WebSockets URIs

   For the first configuration discussed in Section 3, this document
   defines two new URIs schemes that can be used for identifying CoAP
   resources and providing a means of locating these resources:
   "coap+ws" and "coap+wss".

   Similar to the "coap" and "coaps" schemes, the "coap+ws" and
   "coap+wss" schemes organize resources hierarchically under a CoAP
   origin server.  The key difference is that the server is potentially
   reachable on a WebSocket endpoint instead of a UDP endpoint.




Bormann, et al.         Expires October 23, 2016               [Page 15]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


   The WebSocket endpoint is identified by a "ws" or "wss" URI that is
   composed of the authority part of the "coap+ws" or "coap+wss" URI,
   respectively, and the well-known path "/.well-known/coap" [RFC5785].
   The path and query parts of a "coap+ws" or "coap+wss" URI identify a
   resource within the specified endpoint which can be operated on by
   the methods defined by the CoAP protocol.

   The syntax of the "coap+ws" and "coap+wss" URI schemes is specified
   below in Augmented Backus-Naur Form (ABNF) [RFC5234].  The
   definitions of "host", "port", "path-abempty" and "query" are the
   same as in [RFC3986].

     coap-ws-URI =
        "coap+ws:" "//" host [ ":" port ] path-abempty [ "?" query ]

     coap-wss-URI =
        "coap+wss:" "//" host [ ":" port ] path-abempty [ "?" query ]

   The port component is OPTIONAL; the default for "coap+ws" is port 80,
   while the default for "coap+wss" is port 443.

   Fragment identifiers are not part of the request URI and thus MUST
   NOT be transmitted in a WebSocket handshake or in the URI options of
   a CoAP request.

4.2.1.  Decomposing and Composing URIs

   The steps for decomposing a "coap+ws" or "coap+wss" URI into CoAP
   options are the same as specified in Section 6.4 of [RFC7252] with
   the following changes:

   o  The <scheme> component MUST be "coap+ws" or "coap+wss" when
      converted to ASCII lowercase.

   o  A Uri-Host Option MUST only be included in a request when the
      <host> component does not equal the uri-host component in the Host
      header field in the WebSocket handshake.

   o  A Uri-Port Option MUST only be included in a request if |port|
      does not equal the port component in the Host header field in the
      WebSocket handshake.

   The steps to construct a URI from a request's options are changed
   accordingly.







Bormann, et al.         Expires October 23, 2016               [Page 16]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


5.  Security Considerations

   Implementations of CoAP MUST use TLS version 1.2 or higher for CoAP
   over TLS.  The general TLS usage guidance in [RFC7525] SHOULD be
   followed.

   Guidelines for use of cipher suites and TLS extensions can be found
   in [I-D.ietf-dice-profile].

   TLS does not protect the TCP header.  This may, for example, allow an
   on-path adversary to terminate a TCP connection prematurely by
   spoofing a TCP reset message.

   CoAP over WebSockets and CoAP over TLS-secured WebSockets do not
   introduce additional security issues beyond CoAP and DTLS-secured
   CoAP respectively [RFC7252].  The security considerations of
   [RFC6455] apply.

6.  IANA Considerations

6.1.  Service Name and Port Number Registration

   IANA is requested to assign the port number 5683 and the service name
   "coap+tcp", in accordance with [RFC6335].

   Service Name.
      coap+tcp

   Transport Protocol.
      tcp

   Assignee.
      IESG <iesg@ietf.org>

   Contact.
      IETF Chair <chair@ietf.org>

   Description.
      Constrained Application Protocol (CoAP)

   Reference.
      [RFCthis]

   Port Number.
      5683

   Similarly, IANA is requested to assign the service name "coaps+tcp",
   in accordance with [RFC6335].  However, no separate port number is



Bormann, et al.         Expires October 23, 2016               [Page 17]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


   used for "coaps" over TCP; instead, the ALPN protocol ID defined in
   Section 6.4 is used over port 443.

   Service Name.
      coaps+tcp

   Transport Protocol.
      tcp

   Assignee.
      IESG <iesg@ietf.org>

   Contact.
      IETF Chair <chair@ietf.org>

   Description.
      Constrained Application Protocol (CoAP)

   Reference.
      [RFC7301], [RFCthis]

   Port Number.
      443 (see also Section 6.4 of [RFCthis]})

6.2.  URI Scheme Registration

   This document registers two new URI schemes, namely "coap+tcp" and
   "coaps+tcp", for the use of CoAP over TCP and for CoAP over TLS over
   TCP, respectively.  The "coap+tcp" and "coaps+tcp" URI schemes can
   thus be compared to the "http" and "https" URI schemes.

   The syntax of the "coap" and "coaps" URI schemes is specified in
   Section 6 of [RFC7252] and the present document re-uses their
   semantics for "coap+tcp" and "coaps+tcp", respectively, with the
   exception that TCP, or TLS over TCP is used as a transport protocol.

   IANA is requested to add these new URI schemes to the registry
   established with [RFC7595].

6.2.1.  coap+ws

   This document requests the registration of the Uniform Resource
   Identifier (URI) scheme "coap+ws".  The registration request complies
   with [RFC4395].

   URL scheme name.
      coap+ws




Bormann, et al.         Expires October 23, 2016               [Page 18]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


   Status.
      Permanent

   URI scheme syntax.
      Defined in Section N of [RFCthis]

   URI scheme semantics.
      The "coap+ws" URI scheme provides a way to identify resources that
      are potentially accessible over the Constrained Application
      Protocol (CoAP) using the WebSocket Protocol.

   Encoding considerations.
      The scheme encoding conforms to the encoding rules established for
      URIs in [RFC3986], i.e., internationalized and reserved characters
      are expressed using UTF-8-based percent-encoding.

   Applications/protocols that use this URI scheme name.
      The scheme is used by CoAP endpoints to access CoAP resources
      using the WebSocket protocol.

   Interoperability considerations.
      None.

   Security Considerations.
      See Section N of [RFCthis]

   Contact.
      IETF chair <chair@ietf.org>

   Author/Change controller.
      IESG <iesg@ietf.org>

   References.
      [RFCthis]

6.2.2.  coap+wss

   This document requests the registration of the Uniform Resource
   Identifier (URI) scheme "coap+wss".  The registration request
   complies with [RFC4395].

   URL scheme name.
      coap+wss

   Status.
      Permanent

   URI scheme syntax.



Bormann, et al.         Expires October 23, 2016               [Page 19]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


      Defined in Section N of [RFCthis]

   URI scheme semantics.
      The "coap+ws" URI scheme provides a way to identify resources that
      are potentially accessible over the Constrained Application
      Protocol (CoAP) using the WebSocket Protocol secured with
      Transport Layer Security (TLS).

   Encoding considerations.
      The scheme encoding conforms to the encoding rules established for
      URIs in [RFC3986], i.e., internationalized and reserved characters
      are expressed using UTF-8-based percent-encoding.

   Applications/protocols that use this URI scheme name.
      The scheme is used by CoAP endpoints to access CoAP resources
      using the WebSocket protocol secured with TLS.

   Interoperability considerations.
      None.

   Security Considerations.
      See Section N of [RFCthis]

   Contact.
      IETF chair <chair@ietf.org>

   Author/Change controller.
      IESG <iesg@ietf.org>

   References.
      [RFCthis]

6.3.  Well-Known URI Suffix Registration

   IANA is requested to register the 'coap' well-known URI in the "Well-
   Known URIs" registry.  This registration request complies with
   [RFC5785]:

   URI Suffix.
      coap

   Change controller.
      IETF

   Specification document(s).
      [RFCthis]

   Related information.



Bormann, et al.         Expires October 23, 2016               [Page 20]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


      None.

6.4.  ALPN Protocol ID

   IANA is requested to assign the following value in the registry
   "Application Layer Protocol Negotiation (ALPN) Protocol IDs" created
   by [RFC7301]:

   Protocol.
      CoAP

   Identification Sequence.
      0x63 0x6f 0x61 0x70 ("coap")

   Reference.
      [RFCthis]

6.5.  WebSocket Subprotocol Registration

   IANA is requested to register the WebSocket CoAP subprotocol under
   the "WebSocket Subprotocol Name Registry":

   Subprotocol Identifier.
      coap

   Subprotocol Common Name.
      Constrained Application Protocol (CoAP)

   Subprotocol Definition.
      [RFCthis]

7.  References

7.1.  Normative References

   [I-D.ietf-dice-profile]
              Tschofenig, H. and T. Fossati, "TLS/DTLS Profiles for the
              Internet of Things", draft-ietf-dice-profile-17 (work in
              progress), October 2015.

   [RFC0793]  Postel, J., "Transmission Control Protocol", STD 7,
              RFC 793, DOI 10.17487/RFC0793, September 1981,
              <http://www.rfc-editor.org/info/rfc793>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.



Bormann, et al.         Expires October 23, 2016               [Page 21]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              RFC 3986, DOI 10.17487/RFC3986, January 2005,
              <http://www.rfc-editor.org/info/rfc3986>.

   [RFC4395]  Hansen, T., Hardie, T., and L. Masinter, "Guidelines and
              Registration Procedures for New URI Schemes", RFC 4395,
              DOI 10.17487/RFC4395, February 2006,
              <http://www.rfc-editor.org/info/rfc4395>.

   [RFC5246]  Dierks, T. and E. Rescorla, "The Transport Layer Security
              (TLS) Protocol Version 1.2", RFC 5246,
              DOI 10.17487/RFC5246, August 2008,
              <http://www.rfc-editor.org/info/rfc5246>.

   [RFC5785]  Nottingham, M. and E. Hammer-Lahav, "Defining Well-Known
              Uniform Resource Identifiers (URIs)", RFC 5785,
              DOI 10.17487/RFC5785, April 2010,
              <http://www.rfc-editor.org/info/rfc5785>.

   [RFC6455]  Fette, I. and A. Melnikov, "The WebSocket Protocol",
              RFC 6455, DOI 10.17487/RFC6455, December 2011,
              <http://www.rfc-editor.org/info/rfc6455>.

   [RFC7252]  Shelby, Z., Hartke, K., and C. Bormann, "The Constrained
              Application Protocol (CoAP)", RFC 7252,
              DOI 10.17487/RFC7252, June 2014,
              <http://www.rfc-editor.org/info/rfc7252>.

   [RFC7301]  Friedl, S., Popov, A., Langley, A., and E. Stephan,
              "Transport Layer Security (TLS) Application-Layer Protocol
              Negotiation Extension", RFC 7301, DOI 10.17487/RFC7301,
              July 2014, <http://www.rfc-editor.org/info/rfc7301>.

   [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,
              "Recommendations for Secure Use of Transport Layer
              Security (TLS) and Datagram Transport Layer Security
              (DTLS)", BCP 195, RFC 7525, DOI 10.17487/RFC7525, May
              2015, <http://www.rfc-editor.org/info/rfc7525>.

   [RFC7595]  Thaler, D., Ed., Hansen, T., and T. Hardie, "Guidelines
              and Registration Procedures for URI Schemes", BCP 35,
              RFC 7595, DOI 10.17487/RFC7595, June 2015,
              <http://www.rfc-editor.org/info/rfc7595>.







Bormann, et al.         Expires October 23, 2016               [Page 22]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


   [RFC7641]  Hartke, K., "Observing Resources in the Constrained
              Application Protocol (CoAP)", RFC 7641,
              DOI 10.17487/RFC7641, September 2015,
              <http://www.rfc-editor.org/info/rfc7641>.

7.2.  Informative References

   [HomeGateway]
              Eggert, L., "An experimental study of home gateway
              characteristics", Proceedings of the 10th annual
              conference on Internet measurement, 2010.

   [I-D.becker-core-coap-sms-gprs]
              Becker, M., Li, K., Kuladinithi, K., and T. Poetsch,
              "Transport of CoAP over SMS", draft-becker-core-coap-sms-
              gprs-05 (work in progress), August 2014.

   [I-D.bormann-core-block-bert]
              Bormann, C., "Block-wise transfers in CoAP: Extension for
              Reliable Transport (BERT)", draft-bormann-core-block-
              bert-01 (work in progress), June 2016.

   [I-D.bormann-core-cocoa]
              Bormann, C., Betzler, A., Gomez, C., and I. Demirkol,
              "CoAP Simple Congestion Control/Advanced", draft-bormann-
              core-cocoa-03 (work in progress), October 2015.

   [I-D.dijk-core-sleepy-reqs]
              Dijk, E., "Sleepy Devices using CoAP - Requirements",
              draft-dijk-core-sleepy-reqs-00 (work in progress), June
              2013.

   [I-D.ietf-core-block]
              Bormann, C. and Z. Shelby, "Block-wise transfers in CoAP",
              draft-ietf-core-block-20 (work in progress), April 2016.

   [RFC0768]  Postel, J., "User Datagram Protocol", STD 6, RFC 768,
              DOI 10.17487/RFC0768, August 1980,
              <http://www.rfc-editor.org/info/rfc768>.

   [RFC5234]  Crocker, D., Ed. and P. Overell, "Augmented BNF for Syntax
              Specifications: ABNF", STD 68, RFC 5234,
              DOI 10.17487/RFC5234, January 2008,
              <http://www.rfc-editor.org/info/rfc5234>.







Bormann, et al.         Expires October 23, 2016               [Page 23]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


   [RFC6335]  Cotton, M., Eggert, L., Touch, J., Westerlund, M., and S.
              Cheshire, "Internet Assigned Numbers Authority (IANA)
              Procedures for the Management of the Service Name and
              Transport Protocol Port Number Registry", BCP 165,
              RFC 6335, DOI 10.17487/RFC6335, August 2011,
              <http://www.rfc-editor.org/info/rfc6335>.

   [RFC6347]  Rescorla, E. and N. Modadugu, "Datagram Transport Layer
              Security Version 1.2", RFC 6347, DOI 10.17487/RFC6347,
              January 2012, <http://www.rfc-editor.org/info/rfc6347>.

   [RFC6454]  Barth, A., "The Web Origin Concept", RFC 6454,
              DOI 10.17487/RFC6454, December 2011,
              <http://www.rfc-editor.org/info/rfc6454>.

   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Message Syntax and Routing",
              RFC 7230, DOI 10.17487/RFC7230, June 2014,
              <http://www.rfc-editor.org/info/rfc7230>.

Appendix A.  CoAP over WebSocket Examples

   This section gives examples for the first two configurations
   discussed in Section 3.

   An example of the process followed by a CoAP client to retrieve the
   representation of a resource identified by a "coap+ws" URI might be
   as follows.  Figure 17 below illustrates the WebSocket and CoAP
   messages exchanged in detail.

   1.  The CoAP client obtains the URI <coap+ws://example.org/sensors/
       temperature?u=Cel>, for example, from a resource representation
       that it retrieved previously.

   2.  It establishes a WebSocket Connection to the endpoint URI
       composed of the authority "example.org" and the well-known path
       "/.well-known/coap", <ws://example.org/.well-known/coap>.

   3.  It sends a single-frame, masked, binary message containing a CoAP
       request.  The request indicates the target resource with the Uri-
       Path ("sensors", "temperature") and Uri-Query ("u=Cel") options.

   4.  It waits for the server to return a response.

   5.  The CoAP client uses the connection for further requests, or the
       connection is closed.





Bormann, et al.         Expires October 23, 2016               [Page 24]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


      CoAP        CoAP
     Client      Server
   (WebSocket  (WebSocket
     Client)     Server)

        |          |
        |          |
        +=========>|  GET /.well-known/coap HTTP/1.1
        |          |  Host: example.org
        |          |  Upgrade: websocket
        |          |  Connection: Upgrade
        |          |  Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==
        |          |  Sec-WebSocket-Protocol: coap
        |          |  Sec-WebSocket-Version: 13
        |          |
        |<=========+  HTTP/1.1 101 Switching Protocols
        |          |  Upgrade: websocket
        |          |  Connection: Upgrade
        |          |  Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=
        |          |  Sec-WebSocket-Protocol: coap
        |          |
        |          |
        +--------->|  Binary frame (opcode=%x2, FIN=1, MASK=1)
        |          |    +-------------------------+
        |          |    | GET                     |
        |          |    | Token: 0x53             |
        |          |    | Uri-Path: "sensors"     |
        |          |    | Uri-Path: "temperature" |
        |          |    | Uri-Query: "u=Cel"      |
        |          |    +-------------------------+
        |          |
        |<---------+  Binary frame (opcode=%x2, FIN=1, MASK=0)
        |          |    +-------------------------+
        |          |    | 2.05 Content            |
        |          |    | Token: 0x53             |
        |          |    | Payload: "22.3 Cel"     |
        |          |    +-------------------------+
        :          :
        :          :
        |          |
        +--------->|  Close frame (opcode=%x8, FIN=1, MASK=1)
        |          |
        |<---------+  Close frame (opcode=%x8, FIN=1, MASK=0)
        |          |

    Figure 17: A CoAP client retrieves the representation of a resource
                       identified by a "coap+ws" URI




Bormann, et al.         Expires October 23, 2016               [Page 25]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


   Figure 18 shows how a CoAP client uses a CoAP forward proxy with a
   WebSocket endpoint to retrieve the representation of the resource
   "coap://[2001:DB8::1]/".  The use of the forward proxy and the
   address of the WebSocket endpoint are determined by the client from
   local configuration rules.  The request URI is specified in the
   Proxy-Uri Option.  Since the request URI uses the "coap" URI scheme,
   the proxy fulfills the request by issuing a Confirmable GET request
   over UDP to the CoAP server and returning the response over the
   WebSocket connection to the client.

     CoAP        CoAP       CoAP
    Client      Proxy      Server
  (WebSocket  (WebSocket    (UDP
    Client)     Server)   Endpoint)

       |          |          |
       +--------->|          |  Binary frame (opcode=%x2, FIN=1, MASK=1)
       |          |          |    +------------------------------------+
       |          |          |    | GET                                |
       |          |          |    | Token: 0x7d                        |
       |          |          |    | Proxy-Uri: "coap://[2001:DB8::1]/" |
       |          |          |    +------------------------------------+
       |          |          |
       |          +--------->|  CoAP message (Ver=1, T=Con, MID=0x8f54)
       |          |          |    +------------------------------------+
       |          |          |    | GET                                |
       |          |          |    | Token: 0x0a15                      |
       |          |          |    +------------------------------------+
       |          |          |
       |          |<---------+  CoAP message (Ver=1, T=Ack, MID=0x8f54)
       |          |          |    +------------------------------------+
       |          |          |    | 2.05 Content                       |
       |          |          |    | Token: 0x0a15                      |
       |          |          |    | Payload: "ready"                   |
       |          |          |    +------------------------------------+
       |          |          |
       |<---------+          |  Binary frame (opcode=%x2, FIN=1, MASK=0)
       |          |          |    +------------------------------------+
       |          |          |    | 2.05 Content                       |
       |          |          |    | Token: 0x7d                        |
       |          |          |    | Payload: "ready"                   |
       |          |          |    +------------------------------------+
       |          |          |

    Figure 18: A CoAP client retrieves the representation of a resource
      identified by a "coap" URI via a WebSockets-enabled CoAP proxy





Bormann, et al.         Expires October 23, 2016               [Page 26]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


Appendix B.  Change Log

   The RFC Editor is requested to remove this section at publication.

B.1.  Since draft-core-coap-tcp-tls-02

   Merged draft-savolainen-core-coap-websockets-07

Acknowledgements

   We would like to thank Stephen Berard, Geoffrey Cristallo, Olivier
   Delaby, Christian Groves, Nadir Javed, Michael Koster, Matthias
   Kovatsch, Achim Kraus, David Navarro, Szymon Sasin, Zach Shelby,
   Andrew Summers, Julien Vermillard, and Gengyu Wei for their feedback.

Contributors

       Teemu Savolainen
       Nokia Technologies
       Hatanpaan valtatie 30
       Tampere FI-33100
       Finland

       Email: teemu.savolainen@nokia.com

Authors' Addresses

   Carsten Bormann
   Universitaet Bremen TZI
   Postfach 330440
   Bremen  D-28359
   Germany

   Phone: +49-421-218-63921
   Email: cabo@tzi.org


   Simon Lemay
   Zebra Technologies
   820 W. Jackson Blvd. Suite 700
   Chicago  60607
   United States of America

   Phone: +1-847-634-6700
   Email: slemay@zebra.com






Bormann, et al.         Expires October 23, 2016               [Page 27]

Internet-Draft   TCP/TLS/WebSockets Transports for CoAP       April 2016


   Valik Solorzano Barboza
   Zebra Technologies
   820 W. Jackson Blvd. suite 700
   Chicago  60607
   United States of America

   Phone: +1-847-634-6700
   Email: vsolorzanobarboza@zebra.com


   Hannes Tschofenig
   ARM Ltd.
   110 Fulbourn Rd
   Cambridge  CB1 9NJ
   Great Britain

   Email: Hannes.tschofenig@gmx.net
   URI:   http://www.tschofenig.priv.at


   Klaus Hartke
   Universitaet Bremen TZI
   Postfach 330440
   Bremen  D-28359
   Germany

   Phone: +49-421-218-63905
   Email: hartke@tzi.org


   Bilhanan Silverajan
   Tampere University of Technology
   Korkeakoulunkatu 10
   Tampere  FI-33720
   Finland

   Email: bilhanan.silverajan@tut.fi


   Brian Raymor (editor)
   Microsoft
   One Microsoft Way
   Redmond  98052
   United States of America

   Email: brian.raymor@microsoft.com





Bormann, et al.         Expires October 23, 2016               [Page 28]
